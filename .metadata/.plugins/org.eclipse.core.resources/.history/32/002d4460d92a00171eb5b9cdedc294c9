MySQL approach to achieve multitenancy is to add a column to every table that hold tenant data and create a view on the table that gets the tenant from a session variable that is set by the MySqlSessionVariableTenantSessionCallback.
 for eg. In a web application the tenantId could should be set after validating the user credentials and knowing the tenant of the user.
 {code}
 
 
 CREATE TABLE tbl_user ( tenant int NULL,  
 	user_id varchar(100) NOT NULL,  
 	password_hash varchar(256) NOT NULL,  
 	roles varchar(256) 		NOT NULL,  
 	last_updated timestamp DEFAULT now() NOT NULL,  
 	date_created timestamp DEFAULT now() NOT NULL ) ;
 	
CREATE TRIGGER before_insert_tbl_user BEFORE INSERT ON tbl_user FOR EACH ROW SET new.tenant = gettenant();

CREATE TRIGGER before_update_tbl_user BEFORE UPDATE ON tbl_user FOR EACH ROW SET new.last_updated = now();

ALTER TABLE tbl_user ADD CONSTRAINT ct_primarykey PRIMARY KEY CLUSTERED ( tenant, user_id );
 
 You could use the schema mysql generation tool to generate the table from xml below.
 
 <table name="user">
		<column name="user_id" nullable="false" type="string" scale="100"/>
		<column name="password_hash" nullable="false" type="string" scale="256"/>
		<column name="roles" nullable="false" type="string" scale="256" />
		<index primary="true">
			<on>user_id</on>
		</index>
	</table>
	
 

 {code}
 
 sql function to get the tenant from session variable is 
 {code}
 	CREATE FUNCTION gettenant() RETURNS INT 
	BEGIN
		RETURN @tenant;
	END
 {code}
