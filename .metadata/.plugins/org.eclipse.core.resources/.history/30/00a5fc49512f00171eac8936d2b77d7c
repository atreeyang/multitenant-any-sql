package com.analogyx.samples.mysql;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.moveon.multitenant.sql.TenantAwareDataSource;
import org.moveon.multitenant.sql.TenantContext;
import org.moveon.multitenant.sql.TenantDBInstanceProvider;
import org.moveon.multitenant.sql.TenantSessionCallback;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

public class TestMySQLDB {
	public static void main(String[] args) throws Exception{
		
		TenantContext tenantContext = new TenantContext();
		
		TenantAwareDataSource tds = buildTenantDataSource(tenantContext);
		
		//Thread
		tenantContext.set(1);
		Connection conn = tds.getConnection();
		conn.setAutoCommit(false);
		conn.createStatement().execute("insert into retailer(id, name, retailerTimeZone) values(seq('retailer', 1), 'testretailer','tz1')");
		conn.commit();
		conn.close();
		
		//Thread
		tenantContext.set(15);
		conn = tds.getConnection();
		conn.setAutoCommit(false);
		conn.createStatement().execute("insert into retailer(id, name, retailerTimeZone) values(seq('retailer', 1), 'testretailer','tz1')");
		conn.commit();
		conn.close();
		
		//Thread
		tenantContext.set(25);
		conn = tds.getConnection();
		conn.setAutoCommit(false);
		conn.createStatement().execute("insert into retailer(id, name, retailerTimeZone) values(seq('retailer', 1), 'testretailer','tz1')");
		conn.commit();
		conn.close();
		
	}

	private static TenantAwareDataSource buildTenantDataSource(TenantContext tenantContext) {
		TenantAwareDataSource tds = new TenantAwareDataSource();
		Map<String, DataSource> dbInstances = new HashMap<>();
		MysqlDataSource ds1 = new MysqlDataSource();
		ds1.setUrl("jdbc:mysql://localhost:3306/mt1");
		ds1.setUser("root");
		
		MysqlDataSource ds2 = new MysqlDataSource();
		ds2.setUrl("jdbc:mysql://localhost:3306/mt2");
		ds2.setUser("root");
		dbInstances.put("batch1", ds1);
		dbInstances.put("batch2", ds2);
		dbInstances.put("default", ds1);
		
		TenantDBInstanceProvider tenantDBInstanceProvider = new TenantDBInstanceProvider(){
			@Override
			public String getDBInstanceKey(int tenantId) {
				if(tenantId<=10){
					return "batch1";
				}else if(tenantId <=20){
					return "batch2";
				}else{
					return "default";
				}
			}
		};
		
		tds.setDbInstances(dbInstances);
		tds.setTenantContext(tenantContext);
		tds.setTenantSessionCallback(new MySqlSessionVariableTenantSessionCallback());
		tds.setTenantDBInstanceProvider(tenantId->"default");
		return tds;
	}
}
